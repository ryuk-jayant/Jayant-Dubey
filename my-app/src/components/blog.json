[
  {
    "id": 1,
    "title": "Mars Pathfinder: A Priority Story",
    "author": "Jayant Kr",
    "date": "2024-05-20",
    "content": "<P> If you are a little like me then you find yourself asking questions about many theoretical CS stuff and something like a story to relate it to.sure I am not the only one.. Anyway recently ,I studied about OS in my college and during syllabus grind I found a quite fascinating story about MARS pathfinder(A Hope of Humans to turn Red giant into their Sasural). <br> During the probe a small malfunction in the pathfinder’s OS could have compromised the whole Mission (Worth billions of dollars).Soon after landing on red giant computer of rover kept resetting the hardware causing loss of precious time.Eventually computer scientists of NASA figured out the problem and fixed it for a successful new Hollywood movie inspiration. The problem was “Priority Inversion” which we will try to understand together in this writing. <br> So as any Ration Store Owner our cpu’s time and it’s usage are very precious resources.Hence we use something called <strong>“Scheduling algorithms”</strong>.They are algorithms designed to assign cpu resources to each running process of our computer.In many times they do this by assigning priority to the tasks/processes. <br> Let’s have an analogy “if a shopkeeper have two or more customers then he assigns priority to each customer (i.e he chooses customers with highest gain or easy tasks or relation etc.)”.Even we do these types of things in our exams,friends,relatives etc with different criteria. <br> So Many a times in our computers These individual tasks share resources(i.e memory,Data structures,registers and so on..At that time we should ensure that at a time only one process can access the shared resource(let’s call it Critical Section).To ensure this type of access we follow a very human approach i.e we use locks. <br> We literally tell our process to lock the shared resources(critical section) it wants to access..very human indeed..These Locks in programming are called <strong>semaphore</strong><br> So if a process has a lock placed on some resource then It has Exclusive Access to that resource. <br><i>Now just a more basic thing..</i><br><img src='https://cdn.nerdyelectronics.com/wp-content/webp-express/webp-images/uploads/2018/05/three-jobs.jpg.webp'><br><strong>preemption</strong>-If a low Priority task(Employee) is Executing on cpu and a High priority task(Boss) comes from Scheduler then it can replace the current executing task and low priority task can continue after the Boss has been Executed. <br> It’s just like those times when a sarkari babu has an Express Entry and you need to wait in a long queue like any other common fellow but processes unlike you are not bitter about it. <br> So with this you have the basics of process Scheduling and synchronization down <br><i class='ext-center'>…Have a Kitkat….</i><br> Now Our Pathfinder’s Computer is a very complex and uses something called <strong> Hard Realtime OS </strong>In which every process has a time tag attached and if a process is not executed within that time then it’s a failure of the OS(cuz our task is no longer of any value). <br> Our pathfinder has some processes which do specific very high techie-techie things like bus scheduling,bus distribution,communication link,data Transmission and science task. <br> The predefined priority order for these processes were: <br><strong> prio(“bc_sched”) > prior(“bc_dist”) > prio(“communication_task”) > prio(“ASI/MET_task”) </strong><br> Both bc_dist and ASI/MET task used common resources(Data Structures) called pipe() and select(). But our low priority task ASI/MET was preempted by some High priority Task and was not able to release the lock it placed on pipe() and select(). Hence our bc_dist was missing the deadline and due to that our bc_sched was resetting as it considered it as failure. <br><br><br><strong> Now that we Know what the problem is What can be Done? </strong><br> Ans:Remove the thing which is causing the trouble(comment the code) <br> In this case after a lot of discussion of many computer scientists they decided to change the lock or mutex flag to TRUE all the time. <br> It was quite a story about debugging a computer on another planet to an extent many can’t achieve on earth with high level machineries. <br><strong> Hope You had a Nice Read…… </strong></P>",
    "tags": ["React", "JavaScript", "Web Development"],
    "categories": ["Programming", "Operating System"],
    "images": [
      "https://cdn.nerdyelectronics.com/wp-content/webp-express/webp-images/uploads/2018/05/three-jobs.jpg.webp",
      "",
      ""
    ],
    "Bg": "https://media1.tenor.com/m/AZVU4026og0AAAAC/sanji.gif"
  }
]
